/*
 * File: app/controller/MyController.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.MyController', {
    extend: 'Ext.app.Controller',

    config: {
        control: {
            "button#signup": {
                tap: 'onSignupTap'
            },
            "button#listbtn": {
                tap: 'onListbtnTap'
            },
            "button#unplayedbtnright": {
                tap: 'onUnplayedbtnrightTap'
            },
            "button#unplayedbtnleft": {
                tap: 'onUnplayedbtnleftTap'
            },
            "list#mylist": {
                itemtap: 'onMyPodCastList'
            },
            "dataview#mydataview": {
                itemtap: 'onMyPodcastBox'
            },
            "list#mylist2": {
                itemtap: 'onEpisodesTap'
            },
            "list#unplayedlist": {
                itemtap: 'onUnplayedlistItemTap'
            },
            "list#podcastlibrary": {
                itemtap: 'onPodcastlibraryItemTap'
            }
        }
    },

    onSignupTap: function(button, e, eOpts) {
        Ext.Viewport.setActiveItem({
            xtype: 'mainview'
        });
    },

    onListbtnTap: function(button, e, eOpts) {
        var me = this;
        var podcastcontent = Ext.ComponentQuery.query('#podcastcontent')[0];
        podcastcontent.setActiveItem(0);
    },

    onUnplayedbtnrightTap: function(button, e, eOpts) {
        var me = this;
        me.Unplayed();
    },

    onUnplayedbtnleftTap: function(button, e, eOpts) {
        var me = this;
        me.Unplayed();
    },

    onMyPodCastList: function(dataview, index, target, record, e, eOpts) {
        var me = this;
        me.Podcast(record);
    },

    onMyPodcastBox: function(dataview, index, target, record, e, eOpts) {
        var me = this;
        me.Podcast(record);
    },

    onEpisodesTap: function(dataview, index, target, record, e, eOpts) {
        var me = this;
        window.nhanle=e

        if(e.target == e.getTarget('div.player')){
            if(record.get('episode_type') == 0){
                /*
                var audioBase = {
                xtype: 'audio',
                url  : 'crash.mp3',
                loop : true
                };

                var styledAudio = Ext.create('Ext.Audio', Ext.apply({}, audioBase, {
                title: 'Styled',
                cls: 'myAudio',
                layout: 'fit',
                enableControls: true
                }));
                if (styledAudio.isPlaying()) {
                styledAudio.pause();
                //this.setText('Play audio');
            } else {
                styledAudio.play();
                //this.setText('Pause audio');
            }
            */
            var nav = Ext.ComponentQuery.query('#nav')[0];
            nav.push({
                xtype: 'audiocontain',
                title: 'Audio'
            });


        } else {
            var nav = Ext.ComponentQuery.query('#nav')[0];
            nav.push({
                xtype: 'videocontain',
                title: 'Video'
            });
        }
    } else {
        me.Episode(index,record);
    }


    },

    onUnplayedlistItemTap: function(dataview, index, target, record, e, eOpts) {
        var me = this;
        me.Episode(1,record);// always tab with record = 0
    },

    onPodcastlibraryItemTap: function(dataview, index, target, record, e, eOpts) {
        var me = this;
        me.Podcast(record);
    },

    Unplayed: function() {
        var nav = Ext.ComponentQuery.query('#nav')[0];
        nav.push({
            xtype: 'unplayed',
            title: 'Unplayed'
        });

        var me = this;
        //get unplayed
        var store = Ext.StoreMgr.lookup('UnplayedStore');
        store.load();

    },

    Episode: function(index, record) {
        if(index != 0){
            var me = this;
            var nav = Ext.ComponentQuery.query('#nav')[0];
            nav.push({
                xtype: 'episode',
                title: 'Episode Info'
            });

            var episode = Ext.ComponentQuery.query('#episode_info')[0];
            episode.setData({'episode_type':record.get('episode_type'), 'episode_duration': record.get('episode_duration'), 'episode_date': record.get('episode_date')});

            var episode_title = Ext.ComponentQuery.query('#episode_title')[0];
            episode_title.setHtml(record.get('episode_name'));

            var episode_des = Ext.ComponentQuery.query('#episode_des')[0];
            episode_des.setHtml(record.get('episode_description'));

            var btnmark = Ext.ComponentQuery.query('#btnmark')[0];
            btnmark.setDisabled(record.get('episode_played'));
        }

    },

    Podcast: function(record) {
        var me = this;
        //get episodes
        var store = Ext.StoreMgr.lookup('EpisodesStore');
        proxy= store.getProxy();
        proxy.setExtraParam('podcast_id', record.get('podcast_id') );
        store.load();

        //load view
        var nav = Ext.ComponentQuery.query('#nav')[0];
        nav.push({
            xtype: 'episodes',
            title: 'Episodes'
        });

        var podcastlabel = Ext.ComponentQuery.query('#podcastname')[0];
        podcastlabel.setHtml(record.get('podcast_name'));

        var btnsub = Ext.ComponentQuery.query('#btnsubscribe')[0];
        btnsub.setDisabled(record.get('podcast_subscribe'));
    }

});